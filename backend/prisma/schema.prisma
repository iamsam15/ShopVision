// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model to store each Shopify store as a "Tenant"
model Tenant {
  id          String   @id @default(cuid())
  storeUrl    String   @unique
  accessToken String
  createdAt   DateTime @default(now())

  // Relationships
  customers Customer[]
  products  Product[]
  orders    Order[]
  lineItems LineItem[] // Added for tenant-level access if needed
  users     User[]     @relation("TenantToUser")
  checkouts Checkout[]
}

// Model for Customers, linked to a Tenant
model Customer {
  id         BigInt   @id
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  firstName  String?
  lastName   String?
  email      String?
  phone      String?
  createdAt  DateTime
  orderCount Int

  // A customer can have many orders
  orders Order[]

  @@unique([id, tenantId])
}

// Model for Products, linked to a Tenant
model Product {
  id          BigInt   @id
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  title       String
  vendor      String?
  productType String?
  createdAt   DateTime

  // A product can appear in many line items across different orders
  lineItems LineItem[]
  @@unique([id, tenantId])
}

// Model for Orders, linked to a Tenant
model Order {
  id              BigInt    @id
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  totalPrice      Float
  currency        String
  financialStatus String?
  createdAt       DateTime

  // An order belongs to one customer
  customerId BigInt?
  customer   Customer? @relation(fields: [customerId, tenantId], references: [id, tenantId], onDelete: Cascade)


  lineItems LineItem[]

  @@unique([id, tenantId])
}


model LineItem {
  id        BigInt   @id // The unique ID from Shopify's line_item
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  orderId   BigInt
  order     Order    @relation(fields: [orderId, tenantId], references: [id, tenantId], onDelete: Cascade)

  productId BigInt
  product   Product  @relation(fields: [productId, tenantId], references: [id, tenantId], onDelete: Cascade)

  name      String   
  title     String   
  vendor    String?  
  quantity  Int      

  @@unique([id, tenantId])
  @@index([productId]) 
}
// -----------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  tenants Tenant[] @relation("TenantToUser")
}

model Checkout {
  id        BigInt   @id
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email     String?  // The customer's email, if provided
  isCompleted Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([id, tenantId])
}